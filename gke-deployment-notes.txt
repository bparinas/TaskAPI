1. create gc sdk yum repo file 

/etc/yum.repos.d/google-cloud-sdk.repo:
[google-cloud-sdk]
name=Google Cloud SDK
baseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg


2. install gcloud, kubectl, jq & postgresql cli 
yum install -y google-cloud-sdk kubectl jq postgresql


3. before using gcloud set project & compute zone
https://cloud.google.com/resource-manager/docs/creating-managing-projects
https://cloud.google.com/compute/docs/regions-zones/#available

initialize gcloud 
$ gcloud init

create project using gcloud (lowercase, dash & digits only)
$ gcloud projects create taskapi-239309

show gcloud config
$ gcloud config list
[compute]
region = europe-west2
zone = europe-west2-b
[core]
account = bernard@arpa.ph
disable_usage_reporting = True
project = taskapi-239309

Your active configuration is: [default]

gcloud info
$ gcloud info
Google Cloud SDK [244.0.0]

Platform: [Linux, x86_64] ('Linux', 'centos-s-4vcpu-8gb-lon1-01', '3.10.0-957.1.3.el7.x86_64', '#1 SMP Thu Nov 29 14:49:43 UTC 2                                                             018', 'x86_64', 'x86_64')
Python Version: [2.7.5 (default, Apr  9 2019, 14:30:50)  [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]]
Python Location: [/usr/bin/python2]
Site Packages: [Disabled]

Installation Root: [/usr/lib64/google-cloud-sdk]
Installed Components:
  core: [2019.04.26]
  kubectl: [2019.04.26]
  beta: [2019.04.26]
  gsutil: [4.38]
  bq: [2.0.43]
  alpha: [2019.04.26]
System PATH: [/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/nullx/.local/bin:/home/nullx/bin]
Python PATH: [/usr/lib64/google-cloud-sdk/lib/third_party:/usr/lib64/google-cloud-sdk/lib:/usr/lib64/python27.zip:/usr/lib64/pyt                                                             hon2.7/:/usr/lib64/python2.7/plat-linux2:/usr/lib64/python2.7/lib-tk:/usr/lib64/python2.7/lib-old:/usr/lib64/python2.7/lib-dynlo                                                             ad]
Cloud SDK on PATH: [False]
Kubectl on PATH: [False]

Installation Properties: [/usr/lib64/google-cloud-sdk/properties]
User Config Directory: [/home/nullx/.config/gcloud]
Active Configuration Name: [default]
Active Configuration Path: [/home/nullx/.config/gcloud/configurations/config_default]

Account: [bernard@arpa.ph]
Project: [taskapi]

Current Properties:
  [core]
    project: [taskapi]
    account: [bernard@arpa.ph]
    disable_usage_reporting: [True]

Logs Directory: [/home/nullx/.config/gcloud/logs]
Last Log File: [/home/nullx/.config/gcloud/logs/2019.05.01/09.36.54.965765.log]

git: [git version 1.8.3.1]
ssh: [OpenSSH_7.4p1, OpenSSL 1.0.2k-fips  26 Jan 2017]

list a project 
$ gcloud projects list
PROJECT_ID      NAME     PROJECT_NUMBER
taskapi-239309  taskapi  280061142917

update project name
$ gcloud projects update taskapi-239309 --name=TaskAPI
Updated [https://cloudresourcemanager.googleapis.com/v1/projects/taskapi-239309].
$ gcloud projects list
PROJECT_ID      NAME     PROJECT_NUMBER
taskapi-239309  TaskAPI  280061142917

region and zone listing
$ gcloud compute zones list --filter=region:europe-west2
NAME            REGION        STATUS  NEXT_MAINTENANCE  TURNDOWN_DATE
europe-west2-c  europe-west2  UP
europe-west2-b  europe-west2  UP
europe-west2-a  europe-west2  UP

set region and zone
$ gcloud config configurations list
NAME     IS_ACTIVE  ACCOUNT          PROJECT         DEFAULT_ZONE  DEFAULT_REGION
default  True       bernard@arpa.ph  taskapi-239309

$ gcloud config set compute/region europe-west2
Updated property [compute/region].
$ gcloud config set compute/zone europe-west2-b
Updated property [compute/zone].

$ gcloud config configurations list
NAME     IS_ACTIVE  ACCOUNT          PROJECT         DEFAULT_ZONE    DEFAULT_REGION
default  True       bernard@arpa.ph  taskapi-239309  europe-west2-b  europe-west2


4. create GKE cluster
https://cloud.google.com/kubernetes-engine/docs/quickstart

$ gcloud container clusters create taskapi-cluster --num-nodes=3 --machine-type=g1-small

Creating cluster taskapi-cluster in europe-west2-b... Cluster is being health-checked (master is healthy)...done.
Created [https://container.googleapis.com/v1/projects/taskapi-239309/zones/europe-west2-b/clusters/taskapi-cluster].
To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/europe-west2-b/taskapi-cluster?project=taskapi-239309
kubeconfig entry generated for taskapi-cluster.
NAME             LOCATION        MASTER_VERSION  MASTER_IP      MACHINE_TYPE  NODE_VERSION  NUM_NODES  STATUS
taskapi-cluster  europe-west2-b  1.11.8-gke.6    35.246.18.169  g1-small      1.11.8-gke.6  3          RUNNING


5. authenticate into the cluster
$ gcloud container clusters get-credentials taskapi-cluster
Fetching cluster endpoint and auth data.
kubeconfig entry generated for taskapi-cluster.

*create service account
$ kubectl create serviceaccount --namespace kube-system tiller
serviceaccount/tiller created

*bind service account to admin
$ kubectl create clusterrolebinding tiller-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
clusterrolebinding.rbac.authorization.k8s.io/tiller-cluster-admin created


6. install helm and initialize
*install helm

$ curl -LO https://git.io/get_helm.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100  7028  100  7028    0     0  14234      0 --:--:-- --:--:-- --:--:-- 14234

$ chmod 700 get_helm.sh

$ ./get_helm.sh
Downloading https://kubernetes-helm.storage.googleapis.com/helm-v2.13.1-linux-amd64.tar.gz
Preparing to install helm and tiller into /usr/local/bin
helm installed into /usr/local/bin/helm
tiller installed into /usr/local/bin/tiller
Run 'helm init' to configure helm.

$ helm init --service-account tiller
Creating /home/nullx/.helm
Creating /home/nullx/.helm/repository
Creating /home/nullx/.helm/repository/cache
Creating /home/nullx/.helm/repository/local
Creating /home/nullx/.helm/plugins
Creating /home/nullx/.helm/starters
Creating /home/nullx/.helm/cache/archive
Creating /home/nullx/.helm/repository/repositories.yaml
Adding stable repo with URL: https://kubernetes-charts.storage.googleapis.com
Adding local repo with URL: http://127.0.0.1:8879/charts
$HELM_HOME has been configured at /home/nullx/.helm.

Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.

Please note: by default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.
To prevent this, run `helm init` with the --tiller-tls-verify flag.
For more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation
Happy Helming!


7.  create db instance with the postgresql engine
https://cloud.google.com/sql/docs/postgres/create-instance
$ gcloud sql instances create taskapi-psqldb --database-version=POSTGRES_9_6 --tier db-g1-small

Creating Cloud SQL instance...done.
Created [https://www.googleapis.com/sql/v1beta4/projects/taskapi-239309/instances/taskapi-psqldb].
NAME            DATABASE_VERSION  LOCATION       TIER         PRIMARY_ADDRESS  PRIVATE_ADDRESS  STATUS
taskapi-psqldb  POSTGRES_9_6      us-central1-a  db-g1-small  34.66.189.70     -                RUNNABLE


*delete db instance (do not do this in production. GCP policy, you have to wait for 2 months before you can reuse the same instance name) 
$ gcloud sql instances delete taskapi-db
All of the instance data will be lost when the instance is deleted.

Do you want to continue (Y/n)?  Y

Deleting Cloud SQL instance...done.
Deleted [https://www.googleapis.com/sql/v1beta4/projects/taskapi-239309/instances/taskapi-db].


8. set gcr docker credential helper with docker-credential-gcr
install google container registry's docker credential helper
$ cat docker-credential-gcr.sh
#!/bin/bash

VERSION=1.5.0
OS=linux
ARCH=amd64
curl -fsSL "https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${VERSION}/docker-credential-gcr_${OS}_${ARCH}-${VERSION}.tar.gz" \
  | tar xz --to-stdout ./docker-credential-gcr \
  | sudo tee /usr/bin/docker-credential-gcr > /dev/null && sudo chmod +x /usr/bin/docker-credential-gcr

*note non-privileged account must be a member of docker group
$ docker-credential-gcr configure-docker
/home/nullx/.docker/config.json configured to use this credential helper for GCR registries

$ cat /home/nullx/.docker/config.json
{
        "auths": {},
        "credHelpers": {
                "asia.gcr.io": "gcr",
                "eu.gcr.io": "gcr",
                "gcr.io": "gcr",
                "marketplace.gcr.io": "gcloud",
                "staging-k8s.gcr.io": "gcr",
                "us.gcr.io": "gcr"
        }
}


9. set environment variables
file: env.sh (chmod +x env.sh)

#!/bin/bash

MY_EXTERNAL_IP="167.99.92.220"
PGPASSWORD="taskapidb"
DATABASE_NAME="taskapi"
DATABASE_USER="taskapi"
DATABASE_PASS="taskapi"
IMAGE_NAME=gcr.io/taskapi-239309/taskapi
IMAGE_TAG=0.0.1

export MY_EXTERNAL_IP PGPASSWORD DATABASE_NAME DATABASE_USER DATABASE_PASS IMAGE_NAME IMAGE_TAG

$ source env.sh
$ ./env.sh

*update the DB authorized networks with the K&s nodes external IPs & your local machine external IP.
$ gcloud sql instances patch taskapi-psqldb --authorized-networks=$(kubectl get nodes -o json | jq -r '.items[].status.addresses[] | select(.type=="ExternalIP") | { address: .address }' | jq -rs "[.[][]] + [\"$MY_EXTERNAL_IP\"] | join(\",\")")
When adding a new IP address to authorized networks, make sure to also
 include any IP addresses that have already been authorized.
Otherwise, they will be overwritten and de-authorized.

Do you want to continue (Y/n)?  Y

The following message will be used for the patch API method.
{"project": "taskapi-239309", "name": "taskapi-psqldb", "settings": {"ipConfiguration": {"authorizedNetworks": [{"value": "35.242.156.25"}, {"value": "35.242.188.92"}, {"value": "35.197.226.170"}, {"value": "167.99.92.220"}]}}}

Patching Cloud SQL instance...done.
Updated [https://www.googleapis.com/sql/v1beta4/projects/taskapi-239309/instances/taskapi-psqldb].

*set DB Host IP environment variable.
$ export DATABASE_HOST_IP=$(gcloud sql instances list --filter name=taskapi-psqldb --format json | jq -r '.[].ipAddresses[] | select(.type=="PRIMARY") | .ipAddress')

*set postgres user password.
$ gcloud sql users set-password postgres --instance=taskapi-psqldb --password=$PGPASSWORD
Updating Cloud SQL user...done.

*add user for accessing taskapi db.
$ psql -h $DATABASE_HOST_IP -U postgres -d postgres -c "CREATE USER \"$DATABASE_USER\" WITH ENCRYPTED PASSWORD '$DATABASE_PASS'"   CREATE ROLE

*grant all privileges to the user on taskapi db.
$ psql -h $DATABASE_HOST_IP -U postgres -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE $DATABASE_NAME TO $DATABASE_USER"
GRANT

*create a table for storing information about users.
$ psql -h $DATABASE_HOST_IP -U taskapi -d taskapi -c "CREATE TABLE users (user_id serial PRIMARY KEY, user_name VARCHAR(64) UNIQUE NOT NULL, user_birthdate DATE NOT NULL)"
CREATE TABLE
