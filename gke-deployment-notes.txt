1. create gc sdk yum repo file 

/etc/yum.repos.d/google-cloud-sdk.repo:
[google-cloud-sdk]
name=Google Cloud SDK
baseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg


2. install gcloud, kubectl, jq & postgresql cli 
yum install -y google-cloud-sdk kubectl jq postgresql


3. before using gcloud set project & compute zone
https://cloud.google.com/resource-manager/docs/creating-managing-projects
https://cloud.google.com/compute/docs/regions-zones/#available

initialize gcloud 
$ gcloud init

create project using gcloud (lowercase, dash & digits only)
$ gcloud projects create taskapi-239309

show gcloud config
$ gcloud config list
[compute]
region = europe-west2
zone = europe-west2-b
[core]
account = bernard@arpa.ph
disable_usage_reporting = True
project = taskapi-239309

Your active configuration is: [default]

gcloud info
$ gcloud info
Google Cloud SDK [244.0.0]

Platform: [Linux, x86_64] ('Linux', 'centos-s-4vcpu-8gb-lon1-01', '3.10.0-957.1.3.el7.x86_64', '#1 SMP Thu Nov 29 14:49:43 UTC 2                                                             018', 'x86_64', 'x86_64')
Python Version: [2.7.5 (default, Apr  9 2019, 14:30:50)  [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]]
Python Location: [/usr/bin/python2]
Site Packages: [Disabled]

Installation Root: [/usr/lib64/google-cloud-sdk]
Installed Components:
  core: [2019.04.26]
  kubectl: [2019.04.26]
  beta: [2019.04.26]
  gsutil: [4.38]
  bq: [2.0.43]
  alpha: [2019.04.26]
System PATH: [/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/nullx/.local/bin:/home/nullx/bin]
Python PATH: [/usr/lib64/google-cloud-sdk/lib/third_party:/usr/lib64/google-cloud-sdk/lib:/usr/lib64/python27.zip:/usr/lib64/pyt                                                             hon2.7/:/usr/lib64/python2.7/plat-linux2:/usr/lib64/python2.7/lib-tk:/usr/lib64/python2.7/lib-old:/usr/lib64/python2.7/lib-dynlo                                                             ad]
Cloud SDK on PATH: [False]
Kubectl on PATH: [False]

Installation Properties: [/usr/lib64/google-cloud-sdk/properties]
User Config Directory: [/home/nullx/.config/gcloud]
Active Configuration Name: [default]
Active Configuration Path: [/home/nullx/.config/gcloud/configurations/config_default]

Account: [bernard@arpa.ph]
Project: [taskapi]

Current Properties:
  [core]
    project: [taskapi]
    account: [bernard@arpa.ph]
    disable_usage_reporting: [True]

Logs Directory: [/home/nullx/.config/gcloud/logs]
Last Log File: [/home/nullx/.config/gcloud/logs/2019.05.01/09.36.54.965765.log]

git: [git version 1.8.3.1]
ssh: [OpenSSH_7.4p1, OpenSSL 1.0.2k-fips  26 Jan 2017]

list a project 
$ gcloud projects list
PROJECT_ID      NAME     PROJECT_NUMBER
taskapi-239309  taskapi  280061142917

update project name
$ gcloud projects update taskapi-239309 --name=TaskAPI
Updated [https://cloudresourcemanager.googleapis.com/v1/projects/taskapi-239309].
$ gcloud projects list
PROJECT_ID      NAME     PROJECT_NUMBER
taskapi-239309  TaskAPI  280061142917

region and zone listing
$ gcloud compute zones list --filter=region:europe-west2
NAME            REGION        STATUS  NEXT_MAINTENANCE  TURNDOWN_DATE
europe-west2-c  europe-west2  UP
europe-west2-b  europe-west2  UP
europe-west2-a  europe-west2  UP

set region and zone
$ gcloud config configurations list
NAME     IS_ACTIVE  ACCOUNT          PROJECT         DEFAULT_ZONE  DEFAULT_REGION
default  True       bernard@arpa.ph  taskapi-239309

$ gcloud config set compute/region europe-west2
Updated property [compute/region].
$ gcloud config set compute/zone europe-west2-b
Updated property [compute/zone].

$ gcloud config configurations list
NAME     IS_ACTIVE  ACCOUNT          PROJECT         DEFAULT_ZONE    DEFAULT_REGION
default  True       bernard@arpa.ph  taskapi-239309  europe-west2-b  europe-west2


4. create GKE cluster
https://cloud.google.com/kubernetes-engine/docs/quickstart

$ gcloud container clusters create taskapi-cluster --num-nodes=3 --machine-type=g1-small

Creating cluster taskapi-cluster in europe-west2-b... Cluster is being health-checked (master is healthy)...done.
Created [https://container.googleapis.com/v1/projects/taskapi-239309/zones/europe-west2-b/clusters/taskapi-cluster].
To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/europe-west2-b/taskapi-cluster?project=taskapi-239309
kubeconfig entry generated for taskapi-cluster.
NAME             LOCATION        MASTER_VERSION  MASTER_IP      MACHINE_TYPE  NODE_VERSION  NUM_NODES  STATUS
taskapi-cluster  europe-west2-b  1.11.8-gke.6    35.246.18.169  g1-small      1.11.8-gke.6  3          RUNNING


5. authenticate into the cluster
$ gcloud container clusters get-credentials taskapi-cluster
Fetching cluster endpoint and auth data.
kubeconfig entry generated for taskapi-cluster.

*create service account
$ kubectl create serviceaccount --namespace kube-system tiller
serviceaccount/tiller created

*bind service account to admin
$ kubectl create clusterrolebinding tiller-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
clusterrolebinding.rbac.authorization.k8s.io/tiller-cluster-admin created


6. install helm and initialize
*install helm

$ curl -LO https://git.io/get_helm.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100  7028  100  7028    0     0  14234      0 --:--:-- --:--:-- --:--:-- 14234

$ chmod 700 get_helm.sh

$ ./get_helm.sh
Downloading https://kubernetes-helm.storage.googleapis.com/helm-v2.13.1-linux-amd64.tar.gz
Preparing to install helm and tiller into /usr/local/bin
helm installed into /usr/local/bin/helm
tiller installed into /usr/local/bin/tiller
Run 'helm init' to configure helm.

$ helm init --service-account tiller
Creating /home/nullx/.helm
Creating /home/nullx/.helm/repository
Creating /home/nullx/.helm/repository/cache
Creating /home/nullx/.helm/repository/local
Creating /home/nullx/.helm/plugins
Creating /home/nullx/.helm/starters
Creating /home/nullx/.helm/cache/archive
Creating /home/nullx/.helm/repository/repositories.yaml
Adding stable repo with URL: https://kubernetes-charts.storage.googleapis.com
Adding local repo with URL: http://127.0.0.1:8879/charts
$HELM_HOME has been configured at /home/nullx/.helm.

Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.

Please note: by default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.
To prevent this, run `helm init` with the --tiller-tls-verify flag.
For more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation
Happy Helming!


7.  create db instance with the postgresql engine
https://cloud.google.com/sql/docs/postgres/create-instance
$ gcloud sql instances create taskapi-psqldb --database-version=POSTGRES_9_6 --tier db-g1-small

Creating Cloud SQL instance...done.
Created [https://www.googleapis.com/sql/v1beta4/projects/taskapi-239309/instances/taskapi-psqldb].
NAME            DATABASE_VERSION  LOCATION       TIER         PRIMARY_ADDRESS  PRIVATE_ADDRESS  STATUS
taskapi-psqldb  POSTGRES_9_6      us-central1-a  db-g1-small  34.66.189.70     -                RUNNABLE


*delete db instance (do not do this in production. GCP policy, you have to wait for 2 months before you can reuse the same instance name) 
$ gcloud sql instances delete taskapi-db
All of the instance data will be lost when the instance is deleted.

Do you want to continue (Y/n)?  Y

Deleting Cloud SQL instance...done.
Deleted [https://www.googleapis.com/sql/v1beta4/projects/taskapi-239309/instances/taskapi-db].


8. set gcr docker credential helper with docker-credential-gcr
install google container registry's docker credential helper
$ cat docker-credential-gcr.sh (chmod +x docker-credential-gcr.sh)
#!/bin/bash

VERSION=1.5.0
OS=linux
ARCH=amd64
curl -fsSL "https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${VERSION}/docker-credential-gcr_${OS}_${ARCH}-${VERSION}.tar.gz" \
  | tar xz --to-stdout ./docker-credential-gcr \
  | sudo tee /usr/bin/docker-credential-gcr > /dev/null && sudo chmod +x /usr/bin/docker-credential-gcr

*note non-privileged account must be a member of docker group
$ docker-credential-gcr configure-docker
/home/nullx/.docker/config.json configured to use this credential helper for GCR registries

$ cat /home/nullx/.docker/config.json
{
        "auths": {},
        "credHelpers": {
                "asia.gcr.io": "gcr",
                "eu.gcr.io": "gcr",
                "gcr.io": "gcr",
                "marketplace.gcr.io": "gcloud",
                "staging-k8s.gcr.io": "gcr",
                "us.gcr.io": "gcr"
        }
}


9. set environment variables
file: env.sh (chmod +x env.sh)

#!/bin/bash

MY_EXTERNAL_IP="167.99.92.220"
PGPASSWORD="taskapidb"
DATABASE_NAME="taskapi"
DATABASE_USER="taskapi"
DATABASE_PASS="taskapi"
IMAGE_NAME=gcr.io/taskapi-239309/taskapi
IMAGE_TAG=0.0.1

export MY_EXTERNAL_IP PGPASSWORD DATABASE_NAME DATABASE_USER DATABASE_PASS IMAGE_NAME IMAGE_TAG

$ source env.sh
$ ./env.sh

*update the DB authorized networks with the K&s nodes external IPs & your local machine external IP.
$ gcloud sql instances patch taskapi-psqldb --authorized-networks=$(kubectl get nodes -o json | jq -r '.items[].status.addresses[] | select(.type=="ExternalIP") | { address: .address }' | jq -rs "[.[][]] + [\"$MY_EXTERNAL_IP\"] | join(\",\")")
When adding a new IP address to authorized networks, make sure to also
 include any IP addresses that have already been authorized.
Otherwise, they will be overwritten and de-authorized.

Do you want to continue (Y/n)?  Y

The following message will be used for the patch API method.
{"project": "taskapi-239309", "name": "taskapi-psqldb", "settings": {"ipConfiguration": {"authorizedNetworks": [{"value": "35.242.156.25"}, {"value": "35.242.188.92"}, {"value": "35.197.226.170"}, {"value": "167.99.92.220"}]}}}

Patching Cloud SQL instance...done.
Updated [https://www.googleapis.com/sql/v1beta4/projects/taskapi-239309/instances/taskapi-psqldb].

*set DB Host IP environment variable.
$ export DATABASE_HOST_IP=$(gcloud sql instances list --filter name=taskapi-psqldb --format json | jq -r '.[].ipAddresses[] | select(.type=="PRIMARY") | .ipAddress')

*set postgres user password.
$ gcloud sql users set-password postgres --instance=taskapi-psqldb --password=$PGPASSWORD
Updating Cloud SQL user...done.

*add user for accessing taskapi db.
$ psql -h $DATABASE_HOST_IP -U postgres -d postgres -c "CREATE USER \"$DATABASE_USER\" WITH ENCRYPTED PASSWORD '$DATABASE_PASS'"
CREATE ROLE

*grant all privileges to the user on taskapi db.
$ psql -h $DATABASE_HOST_IP -U postgres -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE $DATABASE_NAME TO $DATABASE_USER"
GRANT

*create a table for storing information about users.
$ psql -h $DATABASE_HOST_IP -U taskapi -d taskapi -c "CREATE TABLE users (user_id serial PRIMARY KEY, user_name VARCHAR(64) UNIQUE NOT NULL, user_birthdate DATE NOT NULL)"
CREATE TABLE


10. Build taskapi docker image.
*authenticate to google container registry (gcr)
$ gcloud auth configure-docker
WARNING: Your config file at [/home/nullx/.docker/config.json] contains these credential helper entries:

{
  "credHelpers": {
    "us.gcr.io": "gcr",
    "staging-k8s.gcr.io": "gcr",
    "asia.gcr.io": "gcr",
    "gcr.io": "gcr",
    "marketplace.gcr.io": "gcloud",
    "eu.gcr.io": "gcr"
  }
}
These will be overwritten.
The following settings will be added to your Docker config file
located at [/home/nullx/.docker/config.json]:
 {
  "credHelpers": {
    "gcr.io": "gcloud",
    "us.gcr.io": "gcloud",
    "eu.gcr.io": "gcloud",
    "asia.gcr.io": "gcloud",
    "staging-k8s.gcr.io": "gcloud",
    "marketplace.gcr.io": "gcloud"
  }
}

Do you want to continue (Y/n)?  Y

Docker configuration file updated.
$ cat /home/nullx/.docker/config.json
{
  "auths": {},
  "credHelpers": {
    "gcr.io": "gcloud",
    "us.gcr.io": "gcloud",
    "eu.gcr.io": "gcloud",
    "asia.gcr.io": "gcloud",
    "staging-k8s.gcr.io": "gcloud",
    "marketplace.gcr.io": "gcloud"
  }
}

*create your Dockerfile
FROM gcr.io/google-appengine/python
RUN virtualenv -p python3.6 /env
ENV VIRTUAL_ENV /env
ENV PATH /env/bin:$PATH
ADD requirements.txt /app/requirements.txt
RUN pip install -r /app/requirements.txt
ADD . /app
WORKDIR /app
EXPOSE 5000
CMD ["python", "taskapi.py"]


*build the taskapi image
$ docker build --no-cache -t $IMAGE_NAME:$IMAGE_TAG .
Sending build context to Docker daemon  9.728kB
Step 1/10 : FROM gcr.io/google-appengine/python
latest: Pulling from google-appengine/python
4c72b62cb1fa: Pull complete
32f1d5119664: Pull complete
3c2cba919283: Pull complete
b213663d7428: Pull complete
8d127fef2639: Pull complete
084162bd1447: Pull complete
bcdd255b5133: Pull complete
51dbbab2b586: Pull complete
33368486d4c3: Pull complete
fb8fc9b35779: Pull complete
34f183c44b33: Pull complete
Digest: sha256:a37fa639051f76764c942a1a2e067e8c51f9a53c25c71c67ac9047ca53f239ec
Status: Downloaded newer image for gcr.io/google-appengine/python:latest
 ---> c6d0683c1c6b
Step 2/10 : RUN virtualenv -p python3.6 /env
 ---> Running in dc2ba19c80b9
Running virtualenv with interpreter /opt/python3.6/bin/python3.6
Using base prefix '/opt/python3.6'
New python executable in /env/bin/python3.6
Also creating executable in /env/bin/python
Installing setuptools, pip, wheel...done.
Removing intermediate container dc2ba19c80b9
 ---> 77c8f00976fe
Step 3/10 : ENV VIRTUAL_ENV /env
 ---> Running in 2646ac97588a
Removing intermediate container 2646ac97588a
 ---> 58004275ea7b
Step 4/10 : ENV PATH /env/bin:$PATH
 ---> Running in ee2f76575329
Removing intermediate container ee2f76575329
 ---> 418f6ad79626
Step 5/10 : ADD requirements.txt /app/requirements.txt
 ---> 4caf04086c5a
Step 6/10 : RUN pip install -r /app/requirements.txt
 ---> Running in 81ec5fa0fde4
Collecting flask (from -r /app/requirements.txt (line 1))
  Downloading https://files.pythonhosted.org/packages/7f/e7/08578774ed4536d3242b14dacb4696386634607af824ea997202cd0edb4b/Flask-1.0.2-py2.py3-none-any.whl (91kB)
Collecting flask-restful (from -r /app/requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/17/44/6e490150ee443ca81d5f88b61bb4bbb133d44d75b0b716ebe92489508da4/Flask_RESTful-0.3.7-py2.py3-none-any.whl
Collecting flask-sqlalchemy (from -r /app/requirements.txt (line 3))
  Downloading https://files.pythonhosted.org/packages/08/ca/582442cad71504a1514a2f053006c8bb128844133d6076a4df17117545fa/Flask_SQLAlchemy-2.4.0-py2.py3-none-any.whl
Collecting psycopg2-binary (from -r /app/requirements.txt (line 4))
  Downloading https://files.pythonhosted.org/packages/e9/6e/f2ea78572ab734fb18b35e7ac6805d7889bdfe0fa00b188c4a5f0cb3e6e1/psycopg2_binary-2.8.2-cp36-cp36m-manylinux1_x86_64.whl (2.9MB)
Collecting click>=5.1 (from flask->-r /app/requirements.txt (line 1))
  Downloading https://files.pythonhosted.org/packages/fa/37/45185cb5abbc30d7257104c434fe0b07e5a195a6847506c074527aa599ec/Click-7.0-py2.py3-none-any.whl (81kB)
Collecting itsdangerous>=0.24 (from flask->-r /app/requirements.txt (line 1))
  Downloading https://files.pythonhosted.org/packages/76/ae/44b03b253d6fade317f32c24d100b3b35c2239807046a4c953c7b89fa49e/itsdangerous-1.1.0-py2.py3-none-any.whl
Collecting Werkzeug>=0.14 (from flask->-r /app/requirements.txt (line 1))
  Downloading https://files.pythonhosted.org/packages/18/79/84f02539cc181cdbf5ff5a41b9f52cae870b6f632767e43ba6ac70132e92/Werkzeug-0.15.2-py2.py3-none-any.whl (328kB)
Collecting Jinja2>=2.10 (from flask->-r /app/requirements.txt (line 1))
  Downloading https://files.pythonhosted.org/packages/1d/e7/fd8b501e7a6dfe492a433deb7b9d833d39ca74916fa8bc63dd1a4947a671/Jinja2-2.10.1-py2.py3-none-any.whl (124kB)
Collecting six>=1.3.0 (from flask-restful->-r /app/requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl
Collecting aniso8601>=0.82 (from flask-restful->-r /app/requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/85/58/1e804d6d53435b1b2241036056360575640b69a332e7ead086a04bd5ad95/aniso8601-6.0.0-py2.py3-none-any.whl (41kB)
Collecting pytz (from flask-restful->-r /app/requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/3d/73/fe30c2daaaa0713420d0382b16fbb761409f532c56bdcc514bf7b6262bb6/pytz-2019.1-py2.py3-none-any.whl (510kB)
Collecting SQLAlchemy>=0.8.0 (from flask-sqlalchemy->-r /app/requirements.txt (line 3))
  Downloading https://files.pythonhosted.org/packages/2b/b2/e6f5c5efc68942edefaa924e8fbea0b32375baa434a511cbf6bb17769cf6/SQLAlchemy-1.3.3.tar.gz (5.9MB)
Collecting MarkupSafe>=0.23 (from Jinja2>=2.10->flask->-r /app/requirements.txt (line 1))
  Downloading https://files.pythonhosted.org/packages/b2/5f/23e0023be6bb885d00ffbefad2942bc51a620328ee910f64abe5a8d18dd1/MarkupSafe-1.1.1-cp36-cp36m-manylinux1_x86_64.whl
Building wheels for collected packages: SQLAlchemy
  Building wheel for SQLAlchemy (setup.py): started
  Building wheel for SQLAlchemy (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/6b/02/e3/7f1149be63131cdf6aaaa3330924a2683bb530188940569d66
Successfully built SQLAlchemy
Installing collected packages: click, itsdangerous, Werkzeug, MarkupSafe, Jinja2, flask, six, aniso8601, pytz, flask-restful, SQLAlchemy, flask-sqlalchemy, psycopg2-binary
Successfully installed Jinja2-2.10.1 MarkupSafe-1.1.1 SQLAlchemy-1.3.3 Werkzeug-0.15.2 aniso8601-6.0.0 click-7.0 flask-1.0.2 flask-restful-0.3.7 flask-sqlalchemy-2.4.0 itsdangerous-1.1.0 psycopg2-binary-2.8.2 pytz-2019.1 six-1.12.0
Removing intermediate container 81ec5fa0fde4
 ---> c0e09efa6ab9
Step 7/10 : ADD . /app
 ---> 4a7e921afc13
Step 8/10 : WORKDIR /app
 ---> Running in 1fb849c69f41
Removing intermediate container 1fb849c69f41
 ---> a6a6d3cccbe3
Step 9/10 : EXPOSE 5000
 ---> Running in 31af1b187f0a
Removing intermediate container 31af1b187f0a
 ---> 217ae34d0b83
Step 10/10 : CMD ["python", "taskapi.py"]
 ---> Running in 3af1c2ee874b
Removing intermediate container 3af1c2ee874b
 ---> 03eff9cbf264
Successfully built 03eff9cbf264
Successfully tagged gcr.io/taskapi-239309/taskapi:0.0.1
